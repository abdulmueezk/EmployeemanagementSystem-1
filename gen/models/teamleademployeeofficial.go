// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Teamleademployeeofficial teamleademployeeofficial
//
// swagger:model teamleademployeeofficial
type Teamleademployeeofficial struct {

	// department
	// Example: Golang
	// Required: true
	Department *string `json:"department"`

	// designation
	// Example: Backend Developer
	// Required: true
	Designation *string `json:"designation"`

	// jobtype
	// Example: Interum
	// Required: true
	Jobtype *string `json:"jobtype"`

	// teamlead
	// Example: Kashif Ali
	// Required: true
	Teamlead *string `json:"teamlead"`
}

// Validate validates this teamleademployeeofficial
func (m *Teamleademployeeofficial) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesignation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobtype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamlead(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Teamleademployeeofficial) validateDepartment(formats strfmt.Registry) error {

	if err := validate.Required("department", "body", m.Department); err != nil {
		return err
	}

	return nil
}

func (m *Teamleademployeeofficial) validateDesignation(formats strfmt.Registry) error {

	if err := validate.Required("designation", "body", m.Designation); err != nil {
		return err
	}

	return nil
}

func (m *Teamleademployeeofficial) validateJobtype(formats strfmt.Registry) error {

	if err := validate.Required("jobtype", "body", m.Jobtype); err != nil {
		return err
	}

	return nil
}

func (m *Teamleademployeeofficial) validateTeamlead(formats strfmt.Registry) error {

	if err := validate.Required("teamlead", "body", m.Teamlead); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this teamleademployeeofficial based on context it is used
func (m *Teamleademployeeofficial) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Teamleademployeeofficial) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Teamleademployeeofficial) UnmarshalBinary(b []byte) error {
	var res Teamleademployeeofficial
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
