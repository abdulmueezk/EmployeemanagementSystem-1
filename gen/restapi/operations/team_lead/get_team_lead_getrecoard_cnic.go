// Code generated by go-swagger; DO NOT EDIT.

package team_lead

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTeamLeadGetrecoardCnicHandlerFunc turns a function with the right signature into a get team lead getrecoard cnic handler
type GetTeamLeadGetrecoardCnicHandlerFunc func(GetTeamLeadGetrecoardCnicParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTeamLeadGetrecoardCnicHandlerFunc) Handle(params GetTeamLeadGetrecoardCnicParams) middleware.Responder {
	return fn(params)
}

// GetTeamLeadGetrecoardCnicHandler interface for that can handle valid get team lead getrecoard cnic params
type GetTeamLeadGetrecoardCnicHandler interface {
	Handle(GetTeamLeadGetrecoardCnicParams) middleware.Responder
}

// NewGetTeamLeadGetrecoardCnic creates a new http.Handler for the get team lead getrecoard cnic operation
func NewGetTeamLeadGetrecoardCnic(ctx *middleware.Context, handler GetTeamLeadGetrecoardCnicHandler) *GetTeamLeadGetrecoardCnic {
	return &GetTeamLeadGetrecoardCnic{Context: ctx, Handler: handler}
}

/* GetTeamLeadGetrecoardCnic swagger:route GET /TeamLead/getrecoard/{cnic} TeamLead getTeamLeadGetrecoardCnic

Show Employee recoard

*/
type GetTeamLeadGetrecoardCnic struct {
	Context *middleware.Context
	Handler GetTeamLeadGetrecoardCnicHandler
}

func (o *GetTeamLeadGetrecoardCnic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTeamLeadGetrecoardCnicParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
